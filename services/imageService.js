// services/imageService.js - VERSI√ìN M√ÅS R√ÅPIDA
import axios from "axios";
import sharp from "sharp";

export const uploadToImgBB = async (fileBuffer) => {
  try {
    console.log("üîÑ Optimizando imagen...");

    // ‚úÖ ESTRATEGIA M√ÅS R√ÅPIDA: Reducir calidad y tama√±o
    const optimizedImage = await sharp(fileBuffer)
      .resize(800, 600, {
        // ‚úÖ Tama√±o m√°s peque√±o
        fit: "inside",
        withoutEnlargement: true,
        fastShrinkOnLoad: true,
      })
      .jpeg({
        quality: 60, // ‚úÖ Calidad m√°s baja para mayor velocidad
        mozjpeg: true,
        chromaSubsampling: "4:2:0",
      })
      .toBuffer();

    const originalSizeKB = Math.round(fileBuffer.length / 1024);
    const compressedSizeKB = Math.round(optimizedImage.length / 1024);
    const reduction = Math.round((1 - compressedSizeKB / originalSizeKB) * 100);

    console.log(
      `üìä Compresi√≥n: ${originalSizeKB}KB ‚Üí ${compressedSizeKB}KB (${reduction}% reducido)`
    );

    // ‚úÖ SUBIR A IMGBBB CON TIMEOUT M√ÅS CORTO
    console.log("üì§ Subiendo a ImgBB...");
    const base64Image = optimizedImage.toString("base64");

    const apiKey = process.env.IMGBB_API_KEY;

    if (!apiKey) {
      throw new Error(
        "IMGBB_API_KEY no est√° configurada en las variables de entorno"
      );
    }

    const response = await axios.post(
      `https://api.imgbb.com/1/upload?key=${apiKey}`,
      `image=${encodeURIComponent(base64Image)}`,
      {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
        timeout: 20000, // ‚úÖ 20 segundos m√°ximo para subir
      }
    );

    if (response.data.success) {
      console.log("‚úÖ Imagen subida exitosamente a:", response.data.data.url);
      return response.data.data.url;
    } else {
      throw new Error(
        response.data.error?.message || "Error desconocido de ImgBB"
      );
    }
  } catch (error) {
    console.error("‚ùå Error en uploadToImgBB:", error);
    throw error;
  }
};
