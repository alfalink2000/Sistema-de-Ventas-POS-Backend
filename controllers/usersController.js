// controllers/usersController.js
import bcrypt from "bcryptjs";
import { db } from "../database/connection.js";

export const obtenerUsuarios = async (req, res) => {
  try {
    console.log("üì• [BACKEND] GET /api/users recibida");

    const result = await db.execute(
      "SELECT id, username, email, nombre, rol, activo, ultimo_login, created_at FROM users WHERE activo = true ORDER BY nombre"
    );

    console.log(`üì§ [BACKEND] Enviando ${result.rows.length} usuarios`);

    res.json({
      ok: true,
      usuarios: result.rows,
    });
  } catch (error) {
    console.error("‚ùå [BACKEND] Error al obtener usuarios:", error);
    res.status(500).json({
      ok: false,
      error: "Error interno al obtener usuarios",
    });
  }
};

export const obtenerUsuarioPorId = async (req, res) => {
  try {
    const { id } = req.params;

    const result = await db.execute(
      "SELECT id, username, email, nombre, rol, activo, ultimo_login, created_at FROM users WHERE id = ? AND activo = true",
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({
        ok: false,
        error: "Usuario no encontrado",
      });
    }

    res.json({
      ok: true,
      usuario: result.rows[0],
    });
  } catch (error) {
    console.error("Error al obtener usuario:", error);
    res.status(500).json({
      ok: false,
      error: "Error interno al obtener el usuario",
    });
  }
};

export const crearUsuario = async (req, res) => {
  try {
    console.log("üö® ========== INICIO CREAR USUARIO ==========");
    console.log("üì• [BACKEND] Body recibido:", req.body);

    const { username, email, password, nombre, rol = "vendedor" } = req.body;

    // ‚úÖ VALIDACIONES
    console.log("üîç INICIANDO VALIDACIONES...");

    if (!username || username.trim().length === 0) {
      console.log("‚ùå VALIDACI√ìN FALLIDA: username faltante");
      return res.status(400).json({
        ok: false,
        msg: "El nombre de usuario es requerido",
      });
    }

    if (!email || email.trim().length === 0) {
      console.log("‚ùå VALIDACI√ìN FALLIDA: email faltante");
      return res.status(400).json({
        ok: false,
        msg: "El email es requerido",
      });
    }

    if (!password || password.length < 6) {
      console.log("‚ùå VALIDACI√ìN FALLIDA: password inv√°lido");
      return res.status(400).json({
        ok: false,
        msg: "La contrase√±a debe tener al menos 6 caracteres",
      });
    }

    if (!nombre || nombre.trim().length === 0) {
      console.log("‚ùå VALIDACI√ìN FALLIDA: nombre faltante");
      return res.status(400).json({
        ok: false,
        msg: "El nombre completo es requerido",
      });
    }

    // ‚úÖ VERIFICAR SI EL USUARIO O EMAIL YA EXISTEN
    console.log("üîç Verificando usuario/email existentes...");
    const existingUser = await db.execute(
      "SELECT id FROM users WHERE username = ? OR email = ?",
      [username.trim(), email.trim()]
    );

    if (existingUser.rows.length > 0) {
      console.log("‚ùå Usuario o email ya existe");
      return res.status(400).json({
        ok: false,
        msg: "El nombre de usuario o email ya est√° en uso",
      });
    }

    console.log("‚úÖ TODAS LAS VALIDACIONES PASARON");

    // ‚úÖ ENCRIPTAR CONTRASE√ëA
    console.log("üîê Encriptando contrase√±a...");
    const saltRounds = 10;
    const password_hash = await bcrypt.hash(password, saltRounds);

    // ‚úÖ CREAR USUARIO EN BD
    const userId = `user_${Date.now()}_${Math.random()
      .toString(36)
      .substr(2, 9)}`;

    console.log("üíæ Guardando usuario en BD...");
    await db.execute(
      `INSERT INTO users (id, username, email, password_hash, nombre, rol, activo) 
       VALUES (?, ?, ?, ?, ?, ?, true)`,
      [userId, username.trim(), email.trim(), password_hash, nombre.trim(), rol]
    );

    console.log("‚úÖ USUARIO CREADO CON ID:", userId);

    // ‚úÖ OBTENER USUARIO CREADO (SIN PASSWORD)
    const userResult = await db.execute(
      "SELECT id, username, email, nombre, rol, activo, created_at FROM users WHERE id = ?",
      [userId]
    );

    const usuarioCreado = userResult.rows[0];

    res.status(201).json({
      ok: true,
      usuario: usuarioCreado,
      msg: "Usuario creado exitosamente",
    });

    console.log("üéâ ========== USUARIO CREADO EXITOSAMENTE ==========");
  } catch (error) {
    console.error("üí• ========== ERROR CR√çTICO ==========");
    console.error("‚ùå ERROR EN crearUsuario:", error);
    console.error("üìã Stack trace:", error.stack);

    res.status(500).json({
      ok: false,
      msg: "Error interno al crear usuario: " + error.message,
    });
  }
};

// controllers/usersController.js - ACTUALIZAR actualizarUsuario
export const actualizarUsuario = async (req, res) => {
  try {
    const { id } = req.params;
    console.log("üîÑ [BACKEND] Actualizando usuario ID:", id);
    console.log("üì• [BACKEND] Body recibido:", req.body);

    const {
      username,
      email,
      nombre,
      rol,
      currentPassword,
      newPassword,
      adminPassword,
    } = req.body;

    // ‚úÖ VALIDACIONES B√ÅSICAS
    if (!username || username.trim().length === 0) {
      return res.status(400).json({
        ok: false,
        msg: "El nombre de usuario es requerido",
      });
    }

    if (!email || email.trim().length === 0) {
      return res.status(400).json({
        ok: false,
        msg: "El email es requerido",
      });
    }

    if (!nombre || nombre.trim().length === 0) {
      return res.status(400).json({
        ok: false,
        msg: "El nombre completo es requerido",
      });
    }

    // ‚úÖ VERIFICAR SI EL USUARIO EXISTE
    const usuarioExistente = await db.execute(
      "SELECT * FROM users WHERE id = ?",
      [id]
    );

    if (usuarioExistente.rows.length === 0) {
      return res.status(404).json({
        ok: false,
        msg: "Usuario no encontrado",
      });
    }

    const usuario = usuarioExistente.rows[0];

    // ‚úÖ VERIFICAR SI EL USERNAME O EMAIL YA EST√ÅN EN USO (por otros usuarios)
    const existingUser = await db.execute(
      "SELECT id FROM users WHERE (username = ? OR email = ?) AND id != ?",
      [username.trim(), email.trim(), id]
    );

    if (existingUser.rows.length > 0) {
      return res.status(400).json({
        ok: false,
        msg: "El nombre de usuario o email ya est√° en uso por otro usuario",
      });
    }

    // ‚úÖ VALIDACI√ìN PARA CAMBIO A ROL ADMIN
    if (rol === "admin" && usuario.rol !== "admin") {
      console.log("üîê Validando cambio a rol administrador...");

      if (!adminPassword) {
        return res.status(400).json({
          ok: false,
          msg: "Se requiere contrase√±a de administrador para asignar este rol",
        });
      }

      // Verificar contrase√±a de administrador
      const adminUser = await db.execute(
        "SELECT * FROM users WHERE rol = 'admin' AND activo = true LIMIT 1"
      );

      if (adminUser.rows.length === 0) {
        return res.status(400).json({
          ok: false,
          msg: "No hay administradores en el sistema para validar esta acci√≥n",
        });
      }

      const validAdminPassword = await bcrypt.compare(
        adminPassword,
        adminUser.rows[0].password_hash
      );

      if (!validAdminPassword) {
        return res.status(400).json({
          ok: false,
          msg: "Contrase√±a de administrador incorrecta",
        });
      }
    }

    // ‚úÖ VALIDACI√ìN PARA CAMBIO DE CONTRASE√ëA
    let password_hash = usuario.password_hash;

    if (currentPassword && newPassword) {
      console.log("üîê Procesando cambio de contrase√±a...");

      // Verificar contrase√±a actual
      const validCurrentPassword = await bcrypt.compare(
        currentPassword,
        usuario.password_hash
      );

      if (!validCurrentPassword) {
        return res.status(400).json({
          ok: false,
          msg: "La contrase√±a actual es incorrecta",
        });
      }

      // Validar nueva contrase√±a
      if (newPassword.length < 6) {
        return res.status(400).json({
          ok: false,
          msg: "La nueva contrase√±a debe tener al menos 6 caracteres",
        });
      }

      // Encriptar nueva contrase√±a
      const saltRounds = 10;
      password_hash = await bcrypt.hash(newPassword, saltRounds);
      console.log("‚úÖ Nueva contrase√±a encriptada");
    }

    // ‚úÖ PREPARAR ACTUALIZACIONES
    const updates = {
      username: username.trim(),
      email: email.trim(),
      nombre: nombre.trim(),
      rol: rol || usuario.rol,
      password_hash: password_hash, // Mantener o actualizar la contrase√±a
    };

    console.log("üì¶ Datos para actualizar:", {
      username: updates.username,
      email: updates.email,
      nombre: updates.nombre,
      rol: updates.rol,
      password_updated: currentPassword ? "S√≠" : "No",
    });

    // ‚úÖ CONSTRUIR QUERY DIN√ÅMICO
    const fields = [];
    const values = [];

    Object.keys(updates).forEach((key) => {
      fields.push(`${key} = ?`);
      values.push(updates[key]);
    });

    values.push(id);

    const sql = `UPDATE users SET ${fields.join(
      ", "
    )}, updated_at = CURRENT_TIMESTAMP WHERE id = ?`;

    console.log("üíæ Ejecutando actualizaci√≥n en BD...");
    await db.execute(sql, values);

    // ‚úÖ OBTENER USUARIO ACTUALIZADO (SIN PASSWORD)
    const userResult = await db.execute(
      "SELECT id, username, email, nombre, rol, activo, ultimo_login, created_at FROM users WHERE id = ?",
      [id]
    );

    const usuarioActualizado = userResult.rows[0];

    console.log("‚úÖ Usuario actualizado exitosamente");

    res.json({
      ok: true,
      usuario: usuarioActualizado,
      msg: currentPassword
        ? "Usuario y contrase√±a actualizados exitosamente"
        : "Usuario actualizado exitosamente",
    });
  } catch (error) {
    console.error("‚ùå Error en actualizarUsuario:", error);
    res.status(500).json({
      ok: false,
      msg: "Error interno al actualizar usuario",
      error: error.message,
    });
  }
};

export const eliminarUsuario = async (req, res) => {
  try {
    const { id } = req.params;
    console.log("üóëÔ∏è [BACKEND] Eliminando usuario ID:", id);

    // ‚úÖ VERIFICAR SI EL USUARIO EXISTE
    const usuarioExistente = await db.execute(
      "SELECT * FROM users WHERE id = ?",
      [id]
    );

    if (usuarioExistente.rows.length === 0) {
      return res.status(404).json({
        ok: false,
        msg: "Usuario no encontrado",
      });
    }

    // ‚úÖ ELIMINACI√ìN L√ìGICA (NO F√çSICA)
    await db.execute(
      "UPDATE users SET activo = false, updated_at = CURRENT_TIMESTAMP WHERE id = ?",
      [id]
    );

    console.log("‚úÖ Usuario eliminado (desactivado) exitosamente");

    res.json({
      ok: true,
      msg: "Usuario eliminado exitosamente",
    });
  } catch (error) {
    console.error("‚ùå Error al eliminar usuario:", error);
    res.status(500).json({
      ok: false,
      msg: "Error interno al eliminar usuario",
    });
  }
};
